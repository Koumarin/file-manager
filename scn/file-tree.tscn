[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Tree

signal directory_selected(path)

var directory := Directory.new()

func _ready() -> void:
	var root: TreeItem
	
	connect('item_activated', self, '_on_item_activated')
	connect('item_collapsed', self, '_on_item_collapsed')
	
	## Tree root.
	set_hide_root(true)
	root = create_item()
	root.set_selectable(0, false)
	
	for dir in get_system_dirs():
		var item := add_directory(root, dir)
		item.disable_folding = true
	
	## Filesystem root.
	if OS.get_name() == 'Windows':
		root = create_item(root)
		root.set_text(0, 'Filesystem')
		root.set_selectable(0, false)
		
		for i in range(directory.get_drive_count()):
			var path := get_drive(i)
			var dir  := add_directory(root, path)
			
			update_subdirectories(dir)
	else:
		root = create_item(root)
		root.set_text(0, 'Filesystem')
		root.set_metadata(0, '/')
		root.set_selectable(0, true)
		root.collapsed = true
		
		update_subdirectories(root)

func update_subdirectories(root: TreeItem) -> void:
	var path: String = cascade_tree(root)
	var subdirs     := Util.get_subdirectories(path)
	
	## If we just got here from a Tree signal, it's most likely that
	## our tree is blocked and we can't add children, so we wait a
	## frame until the tree unblocks.
	yield(get_tree(), 'idle_frame')
	for dir in subdirs:
		add_directory(root, dir)

func add_directory(root: TreeItem, path: String) -> TreeItem:
	var item: TreeItem
	
	item = create_item(root)
	if item:
		item.set_text(0, Util.translate_path_name(path))
		item.set_metadata(0, path)
		item.collapsed = true
		return item
	return null

func get_drive(idx: int) -> String:
	var path := directory.get_drive(idx)
	
	match OS.get_name():
		'Windows': return path + '/'
		_:         return path

func get_system_dirs() -> Array:
	var dirs := []
	
	if OS.get_name() == 'Windows':
		for i in range(OS.SYSTEM_DIR_RINGTONES + 1):
			var path := OS.get_system_dir(i)
			if not dirs.has(path):
				dirs.append(path)
	elif OS.get_name() == 'X11':
		for i in range(directory.get_drive_count()):
			var path := directory.get_drive(i)
			if not path == '/' and not path == '/home':
				dirs.append(path)
	
	return dirs

func cascade_tree(item: TreeItem) -> String:
	var path = item.get_metadata(0)
	
	if not item.get_parent().get_metadata(0):
		return path
	elif not path or path == '/':
		return ''
	else:
		var delim := '' if path.ends_with('/') else '/'
		return cascade_tree(item.get_parent()) + item.get_metadata(0) + delim

func _on_item_activated() -> void:
	var selected_node = get_selected()
	
	if null == selected_node:
		return
	emit_signal('directory_selected', cascade_tree(selected_node))

### This triggers both when an item collapses and when it's uncollapsed.
func _on_item_collapsed (item: TreeItem) -> void:
	if not item.collapsed and item.get_metadata(0):
		var path: String = item.get_metadata(0)
		var i:    TreeItem
		
		i = item.get_children()
		while i:
			if not i.get_children():
				update_subdirectories(i)
			i = i.get_next()
"

[node name="FileTree" type="Tree"]
margin_right = 253.0
margin_bottom = 600.0
mouse_filter = 1
size_flags_horizontal = 3
size_flags_vertical = 3
script = SubResource( 1 )
