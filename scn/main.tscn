[gd_scene load_steps=6 format=3 uid="uid://djosjcxhep0n8"]

[ext_resource type="PackedScene" uid="uid://fhpm86itcnxn" path="res://scn/icon-container.tscn" id="1"]
[ext_resource type="PackedScene" uid="uid://c6bs4yl6jqiju" path="res://scn/file-tree.tscn" id="2"]
[ext_resource type="PackedScene" uid="uid://dj05xf6hpqn4i" path="res://scn/title-bar.tscn" id="3"]
[ext_resource type="Theme" path="res://dat/theme/default.tres" id="4"]

[sub_resource type="GDScript" id="1"]
script/source = "extends Control

signal directory_changed(directory)

var directory: DirAccess

var _history     := []
var _history_idx := 0

@onready var history_popup := $HistoryPopup

func _ready() -> void:
	var init_dir: String
	
	if OS.get_name() == 'Windows':
		init_dir = 'C:/'
	else:
		init_dir = '/home/' + Util.get_username()
	
	directory = DirAccess.open(init_dir)
	if not directory:
		printerr('Can\\'t open directory ', init_dir, ':',
				DirAccess.get_open_error())
		return
	
	get_window().set_title(Util.get_relative_path(directory.get_current_dir()))
	_history.append(directory.get_current_dir())
	
	emit_signal('directory_changed', init_dir)

func change_directory(path: String, write_history := true) -> int:
	var status: int
	
	if path == directory.get_current_dir():
		return OK
	
	status = directory.change_dir(path)
	if status == OK:
		if write_history:
			_history = _history.slice(0, _history_idx)
			_history_idx += 1
			_history.append(directory.get_current_dir())
		get_window().set_title(Util.get_relative_path(path))
		emit_signal('directory_changed', path)
	return status

func open_file(path: String, args: PackedStringArray = []) -> int:
	var status := OS.shell_open(path)
	
	if status != OK:
		OS.execute(path, args)
	return status

func _on_icon_opened(icon) -> void:
	var path: String = icon.get_file_path()
	if directory.dir_exists(path):
		change_directory(path)
	else:
		print(Util.get_absolute_path(directory, path))
		open_file(Util.get_absolute_path(directory, path))

func _on_FileTree_directory_selected(path) -> void:
	print(path)
	change_directory(path)

func _on_TitleBar_back_selected() -> void:
	if _history_idx == 0:
		return
	
	_history_idx -= 1
	change_directory(_history[_history_idx], false)

func _on_TitleBar_forward_selected() -> void:
	if _history_idx == len(_history) - 1:
		return
	
	_history_idx += 1
	change_directory(_history[_history_idx], false)

func _on_TitleBar_path_entered(path: String):
	change_directory(path)

func _on_TitleBar_history_selected() -> void:
	print(_history)
	if not history_popup.visible:
		history_popup.clear()
		for i in range(len(_history)):
			var path = _history[i]
			var text = Util.get_relative_path(path)
			
			if i == _history_idx:
				text = '> ' + text
			
			history_popup.add_item(text)
			history_popup.set_item_metadata(i, path)
		history_popup.show()
	else:
		history_popup.hide()
		history_popup.clear()

func _on_HistoryPopup_index_pressed(index: int) -> void:
	_history_idx = index
	change_directory(history_popup.get_item_metadata(index), false)
"

[node name="Main" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("4")
script = SubResource("1")

[node name="Panel" type="Panel" parent="."]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
mouse_filter = 1

[node name="VBoxContainer" type="VBoxContainer" parent="Panel"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="TitleBar" parent="Panel/VBoxContainer" instance=ExtResource("3")]
layout_mode = 2

[node name="HSplitContainer" type="HSplitContainer" parent="Panel/VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
split_offset = -253

[node name="FileTree" parent="Panel/VBoxContainer/HSplitContainer" instance=ExtResource("2")]
layout_mode = 2

[node name="IconContainer" parent="Panel/VBoxContainer/HSplitContainer" instance=ExtResource("1")]
layout_mode = 2

[node name="HistoryPopup" type="PopupMenu" parent="."]

[connection signal="directory_changed" from="." to="Panel/VBoxContainer/TitleBar" method="_on_directory_changed"]
[connection signal="directory_changed" from="." to="Panel/VBoxContainer/HSplitContainer/IconContainer" method="_on_directory_changed"]
[connection signal="back_select" from="Panel/VBoxContainer/TitleBar" to="." method="_on_TitleBar_back_selected"]
[connection signal="forward_select" from="Panel/VBoxContainer/TitleBar" to="." method="_on_TitleBar_forward_selected"]
[connection signal="history_select" from="Panel/VBoxContainer/TitleBar" to="." method="_on_TitleBar_history_selected"]
[connection signal="path_enter" from="Panel/VBoxContainer/TitleBar" to="." method="_on_TitleBar_path_entered"]
[connection signal="directory_selected" from="Panel/VBoxContainer/HSplitContainer/FileTree" to="." method="_on_FileTree_directory_selected"]
[connection signal="icon_opened" from="Panel/VBoxContainer/HSplitContainer/IconContainer" to="." method="_on_icon_opened"]
[connection signal="index_pressed" from="HistoryPopup" to="." method="_on_HistoryPopup_index_pressed"]
