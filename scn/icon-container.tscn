[gd_scene load_steps=3 format=3 uid="uid://fhpm86itcnxn"]

[ext_resource type="PackedScene" uid="uid://ckvp4wh5fnjb5" path="res://scn/icon.tscn" id="1"]

[sub_resource type="GDScript" id="1"]
script/source = "extends ScrollContainer

signal icon_opened(file)
signal icon_selected(icon)

@export var Icon: PackedScene

var _cutting := false

var _file_clipboard: Array[String] = []

var _selection := []

var _multi_select := false
var _ctrl_select  := false

var _directory: DirAccess
var _skip_hidden := true

@onready var icon_container := $GridContainer

func _unhandled_input(event: InputEvent) -> void:
	if event.is_action_released('toggle-hidden'):
		_skip_hidden = not _skip_hidden
		update_icons()
	elif event.is_action_released('copy'):
		if not _selection.is_empty():
			_file_clipboard = get_selection_paths()
	elif event.is_action_released('cut'):
		_cutting = true
		if not _selection.is_empty():
			_file_clipboard = get_selection_paths()
	elif event.is_action_released('paste'):
		var to_dir := _directory.get_current_dir() + '/'
		
		for from in _file_clipboard:
			var to := to_dir + Util.get_relative_path(from)
			
			if _cutting:
				DirAccess.rename_absolute(from, to)
			else:
				DirAccess.copy_absolute(from, to)
		update_icons()
	elif event.is_action_released('delete'):
		for i in _selection:
			var p := Util.get_absolute_path(_directory, i.get_file_path())
			
			OS.move_to_trash(p)
		_deselect_all()
		update_icons()

func get_selection_paths() -> Array[String]:
	var lst: Array[String] = []
	
	for i in _selection:
		var p := Util.get_absolute_path(_directory, i.get_file_path())
		lst.append(p)
	return lst

func update_icons() -> void:
	var files: PackedStringArray
	
	_deselect_all()
	clear()
	
	files  = _directory.get_files()
	files += _directory.get_directories()
	for i in files:
		var is_dir := DirAccess.dir_exists_absolute(i)
		
		_create_icon(i, is_dir)

### Removes all icons currently displayed.
func clear() -> void:
	get_tree().call_group('Icons', 'queue_free')

### We resize the icon container so that it has as many icons
### as it can fit horizontally.
func _resize_icon_container() -> void:
	if icon_container.get_child_count() > 0:
		var icon_size: Vector2 = icon_container.get_child(0).size
		
		if icon_container.size.x + icon_size.x <= size.x:
			icon_container.columns += 1
		elif icon_container.size.x > size.x:
			icon_container.columns -= 1

func _on_GridContainer_sort_children() -> void:
	_resize_icon_container()

### Updates display with the current directory's files.
func _on_directory_changed(path: String) -> void:
	if not _directory:
		_directory = DirAccess.open(path)
	else:
		_directory.change_dir(path)
	update_icons()

func _create_icon(file: String, is_dir: bool) -> void:
	var icon = Icon.instantiate()
	
	if is_dir:
		icon.is_directory = true
	
	icon.set_file_path(file)
	icon.connect('opened',Callable(self,'_on_icon_opened'))
	icon.connect('selected',Callable(self,'_on_icon_selected'))
	icon.add_to_group('Icons')
	icon_container.add_child(icon)

func _on_icon_opened(icon) -> void:
	emit_signal('icon_opened', icon)

func _on_icon_selected(icon) -> void:
	## Shift selection.
	if _multi_select:
		var first
		var pos: int
		var dir: int
		var children := _get_all_icons()
		
		## We get the icon that started our selection.
		if _selection.is_empty():
			first = get_child(0)
		else:
			first = _selection[0]
		## Our initial icon was clicked, so we just ignore.
		if first == icon:
			return
		## We deselect all icons beside our first one.
		for i in children:
			if not i == first:
				_deselect(i)
		
		pos = children.find(first)
		## If our initial icon is after our newly selected one,
		## we need to go backwards.
		dir = -1 if children.find(icon) < pos else 1
		
		for i in range(pos, children.find(icon) + dir, dir):
			var x = children[i]
			
			x.select()
			_selection.append(x)
	## Control selection.
	elif _ctrl_select:
		if _selection.has(icon):
			_deselect(icon)
		else:
			_selection.append(icon)
			emit_signal('icon_selected', icon)
	## Single selection.
	else:
		if not _selection.has(icon):
			_deselect_all()
			_selection = [icon]
			emit_signal('icon_selected', icon)

func _get_all_icons() -> Array:
	return icon_container.get_children()

func _deselect(icon) -> void:
	if _selection.has(icon):
		icon.deselect()
		_selection.erase(icon)

func _deselect_all() -> void:
	if _selection:
		for i in _selection:
			i.deselect()
		_selection = []
"

[node name="IconContainer" type="ScrollContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3
script = SubResource("1")
Icon = ExtResource("1")

[node name="GridContainer" type="GridContainer" parent="."]
layout_mode = 2

[connection signal="sort_children" from="GridContainer" to="." method="_on_GridContainer_sort_children"]
